-- Quartus Prime VHDL Template
-- Four-State Moore State Machine

-- A Moore machine's outputs are dependent only on the current state.
-- The output is written only when the state changes.  (State
-- transitions are synchronous.)

library ieee;
use ieee.std_logic_1164.all;

entity uart_algo is
	generic(
		ancho					: integer :=1280;
		alto					: integer :=1024
	);
	port(
		clk			: in	std_logic;
		reset	 		: in	std_logic;
		rx_dv	 		: in std_logic;
		rx_byte 		: in std_logic_vector (7 downto 0);
		pix_count	: out integer range 0 to ancho*alto;
		byte_o	: out std_logic_vector(7 downto 0);
	);

end entity;

architecture rtl of uart_algo is

	-- Build an enumerated type for the state machine
	type state_type is (idle, envio);

	-- Register to hold the current state
	signal state   : state_type;
	
	signal pix_count_int : integer range 0 to ancho*alto;
begin
	
	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if reset = '1' then
			state <= idle;
			pix_count_int <= 0;
		elsif (rising_edge(clk)) then
			case state is
				when idle=>
					if rx_dv = '1' then
						state <= envio;
						pix_count_int <= pix_count_int + 1;
					else
						state <= idle;
						if pix_count_int = ancho * alto then
							pix_count_int <= 0;
						end if;
					end if;
				when envio=>
					state<=idle;
			end case;
		end if;
	end process;

	-- Output depends solely on the current state
	process (state)
	begin
		case state is
			when s0 =>
				output <= "00";
			when s1 =>
				output <= "01";
			when s2 =>
				output <= "10";
			when s3 =>
				output <= "11";
		end case;
	end process;

end rtl;
