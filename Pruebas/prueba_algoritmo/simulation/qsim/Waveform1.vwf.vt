// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/19/2024 18:34:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          uart_algo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uart_algo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg [7:0] rx_byte;
reg rx_dv;
// wires                                               
wire [7:0] byte_o;
wire [20:0] pix_count;

// assign statements (if any)                          
uart_algo i1 (
// port map - connection between master ports and signals/registers   
	.byte_o(byte_o),
	.clk(clk),
	.pix_count(pix_count),
	.reset(reset),
	.rx_byte(rx_byte),
	.rx_dv(rx_dv)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #40000 1'b1;
end 
// rx_byte[ 7 ]
initial
begin
	rx_byte[7] = 1'b0;
end 
// rx_byte[ 6 ]
initial
begin
	rx_byte[6] = 1'b0;
end 
// rx_byte[ 5 ]
initial
begin
	rx_byte[5] = 1'b0;
end 
// rx_byte[ 4 ]
initial
begin
	rx_byte[4] = 1'b0;
end 
// rx_byte[ 3 ]
initial
begin
	rx_byte[3] = 1'b0;
	rx_byte[3] = #800000 1'b1;
end 
// rx_byte[ 2 ]
initial
begin
	rx_byte[2] = 1'b0;
	rx_byte[2] = #400000 1'b1;
	rx_byte[2] = #400000 1'b0;
end 
// rx_byte[ 1 ]
initial
begin
	repeat(2)
	begin
		rx_byte[1] = 1'b0;
		rx_byte[1] = #200000 1'b1;
		# 200000;
	end
	rx_byte[1] = 1'b0;
end 
// rx_byte[ 0 ]
always
begin
	rx_byte[0] = 1'b0;
	rx_byte[0] = #100000 1'b1;
	#100000;
end 

// rx_dv
initial
begin
	rx_dv = 1'b0;
	rx_dv = #60000 1'b1;
	rx_dv = #20000 1'b0;
	rx_dv = #80000 1'b1;
	rx_dv = #20000 1'b0;
	rx_dv = #80000 1'b1;
	rx_dv = #20000 1'b0;
	rx_dv = #80000 1'b1;
	rx_dv = #20000 1'b0;
	rx_dv = #80000 1'b1;
	rx_dv = #20000 1'b0;
	rx_dv = #80000 1'b1;
	rx_dv = #20000 1'b0;
	rx_dv = #80000 1'b1;
	rx_dv = #20000 1'b0;
	rx_dv = #80000 1'b1;
	rx_dv = #20000 1'b0;
	rx_dv = #80000 1'b1;
	rx_dv = #20000 1'b0;
	rx_dv = #80000 1'b1;
	rx_dv = #20000 1'b0;
end 
endmodule

