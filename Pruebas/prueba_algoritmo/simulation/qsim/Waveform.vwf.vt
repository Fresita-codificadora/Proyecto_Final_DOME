// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/19/2024 13:29:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          test_uart_tx_rx
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_uart_tx_rx_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg i_rx_dv;
reg i_tx_done;
reg reset;
reg [7:0] rx_in;
// wires                                               
wire o_uart_tx;
wire [7:0] registro_entrada;
wire [7:0] tx_out;

// assign statements (if any)                          
test_uart_tx_rx i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.i_rx_dv(i_rx_dv),
	.i_tx_done(i_tx_done),
	.o_uart_tx(o_uart_tx),
	.registro_entrada(registro_entrada),
	.reset(reset),
	.rx_in(rx_in),
	.tx_out(tx_out)
);
initial 
begin 
#500000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// rx_in[ 7 ]
initial
begin
	rx_in[7] = 1'b0;
	rx_in[7] = #40000 1'b1;
	rx_in[7] = #50000 1'b0;
end 
// rx_in[ 6 ]
initial
begin
	rx_in[6] = 1'b0;
	rx_in[6] = #150000 1'b1;
	rx_in[6] = #40000 1'b0;
end 
// rx_in[ 5 ]
initial
begin
	rx_in[5] = 1'b0;
	rx_in[5] = #40000 1'b1;
	rx_in[5] = #50000 1'b0;
end 
// rx_in[ 4 ]
initial
begin
	rx_in[4] = 1'b0;
	rx_in[4] = #150000 1'b1;
	rx_in[4] = #40000 1'b0;
end 
// rx_in[ 3 ]
initial
begin
	rx_in[3] = 1'b0;
	rx_in[3] = #40000 1'b1;
	rx_in[3] = #50000 1'b0;
end 
// rx_in[ 2 ]
initial
begin
	rx_in[2] = 1'b0;
end 
// rx_in[ 1 ]
initial
begin
	rx_in[1] = 1'b0;
	rx_in[1] = #40000 1'b1;
	rx_in[1] = #50000 1'b0;
end 
// rx_in[ 0 ]
initial
begin
	rx_in[0] = 1'b0;
	rx_in[0] = #150000 1'b1;
	rx_in[0] = #40000 1'b0;
end 

// i_rx_dv
initial
begin
	i_rx_dv = 1'b0;
	i_rx_dv = #40000 1'b1;
	i_rx_dv = #20000 1'b0;
	i_rx_dv = #100000 1'b1;
	i_rx_dv = #20000 1'b0;
end 

// i_tx_done
initial
begin
	i_tx_done = 1'b0;
	i_tx_done = #90000 1'b1;
	i_tx_done = #120000 1'b0;
	i_tx_done = #90000 1'b1;
	i_tx_done = #100000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #20000 1'b1;
end 
endmodule

