-- Quartus Prime VHDL Template
-- Four-State Moore State Machine

-- A Moore machine's outputs are dependent only on the current state.
-- The output is written only when the state changes.  (State
-- transitions are synchronous.)

library ieee;
use ieee.std_logic_1164.all;

entity CIC_SRAM_controller is

	port(
	-- entradas-----
		clk		 : in	std_logic;
		reset	 : in	std_logic;
		trigger : in std_logic;
		enable_done : in std_logic;
		sw : in std_logic_vector(17 downto 0);
	-- salidas internas --
		trigger_cam : out std_logic;
		enable_cic : out std_logic;
		-- SRAM --
		reset_n : out std_logic;
		data : out std_logic_vector(15 downto 0);
		addrs : out std_logic_vector (19 downto 0);
		action : out std_logic;
	-- salidas externas--
		led_errase,led_lectura out std_logic;
		trigger_cam : out std_logic
	);

end entity;

architecture rtl of CIC_SRAM_controller is

	-- Build an enumerated type for the state machine
	type state_type is (errase, wait_done , trigger_wait, escritura, lectura);

	-- Register to hold the current state
	signal state   : state_type;

begin

	-- Logic to advance to the next state
	process (clk, reset)
		variable count_errase : integer range 0 to 2**20-1:=0;
	begin
		if reset = '0' then
			state <= errase;
			count_errase:=0;
		elsif (rising_edge(clk)) then
			case state is
				when errase=>
					if count_errase=2**20-1 then
						state <= wait_done;
					else
						count_errase:=count_errase+1;
						state <= errase;
					end if;
				when s1=>
					if input = '1' then
						state <= s2;
					else
						state <= s1;
					end if;
				when s2=>
					if input = '1' then
						state <= s3;
					else
						state <= s2;
					end if;
				when s3 =>
					if input = '1' then
						state <= s0;
					else
						state <= s3;
					end if;
			end case;
		end if;
	end process;

	-- Output depends solely on the current state
	process (state)
	begin
		case state is
			when s0 =>
				output <= "00";
			when s1 =>
				output <= "01";
			when s2 =>
				output <= "10";
			when s3 =>
				output <= "11";
		end case;
	end process;

end rtl;
